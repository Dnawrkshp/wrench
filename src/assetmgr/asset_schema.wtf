/*
	wrench - A set of modding tools for the Ratchet & Clank PS2 games.
	Copyright (C) 2019-2022 chaoticgd

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

format_version: 8

// *****************************************************************************

Category general {
	name: 'General'
}

AssetType Root {
	hidden: true
}

AssetType Reference {
	desc: 'A reference to an asset that can be put in place of any other asset.'
	
	AssetReferenceAttribute asset {
		desc: 'The asset being referenced.'
		required: true
		games: [1 2 3 4]
	}
}

AssetType Collection {
	desc: 'A generic container for other assets.'
}

AssetType Binary {
	desc: 'A raw binary file. Used for assets that wrench cannot unpack.'
	
	FileReferenceAttribute src {
		desc: 'The file path of the binary file, relative to the .asset file.'
		required: false
		games: [1 2 3 4]
	}
	
	// These are only used for testing.
	StringAttribute asset_type { hidden: true }
	IntegerAttribute format_hint { hidden: true }
	IntegerAttribute game { hidden: true }
	
	Examples examples {
		Binary code {
			src: 'code.bin'
		}
	}
}

// *****************************************************************************

AssetType Build {
	desc: 'A build of the game.'
	
	IntegerAttribute game {
		desc: 'The game being built. 1 for R&C1, 2 for R&C2, 3 for R&C3, 4 for Deadlocked.'
		required: true
		games: [1 2 3 4]
	}
	
	IntegerAttribute ps2_logo_key {
		desc: 'The key used to "encrypt" the PS2 logo.'
		min: 0
		max: 255
		required: true
		games: [1 2 3 4]
	}
	
	IntegerAttribute single_level {
		default: -1
		required: false
		games: [1 2 3 4]
	}
	
	Child ps2_logo {
		desc: 'The PS2 logo stored on the first 12 sectors of the disc.'
		allowed_types: ['Texture']
		required: true
		games: [1 2 3 4]
	}
	Child primary_volume_descriptor {
		allowed_types: ['PrimaryVolumeDescriptor']
		required: true
		games: [1 2 3 4]
	}
	Child armor {
		allowed_types: ['ArmorWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3 4]
	}
	Child audio {
		allowed_types: ['AudioWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3 4]
	}
	Child bonus {
		allowed_types: ['BonusWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3 4]
	}
	Child gadget {
		allowed_types: ['GadgetWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3]
	}
	Child hud {
		allowed_types: ['HudWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3 4]
	}
	Child misc {
		allowed_types: ['MiscWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3 4]
	}
	Child mpeg {
		allowed_types: ['MpegWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3 4]
	}
	Child online {
		allowed_types: ['OnlineWad' 'FlatWad' 'Binary']
		required: true
		games: [4]
	}
	Child scene {
		allowed_types: ['SceneWad' 'FlatWad' 'Binary']
		required: true
		games: [2]
	}
	Child space {
		allowed_types: ['SpaceWad' 'FlatWad' 'Binary']
		required: true
		games: [2 3 4]
	}
	
	Child levels {
		allowed_types: ['Collection'] desc: 'The list of levels to include in the build.'
		required: true
		games: [1 2 3 4]
	}
	Child files {
		allowed_types: ['Collection'] desc: 'Additional files to include in the build.'
		required: true
		games: [1 2 3 4]
	}
	
	Child moby_classes { allowed_types: ['Collection'] }
	Child tie_classes { allowed_types: ['Collection'] }
	Child shrub_classes { allowed_types: ['Collection'] }
	
	Child particle_textures { allowed_types: ['Collection'] }
	Child fx_textures { allowed_types: ['Collection'] }
}

AssetType PrimaryVolumeDescriptor {
	desc: 'A filesystem structure that contains metadata.'
	
	StringAttribute system_identifier {}
	StringAttribute volume_identifier {}
	StringAttribute volume_set_identifier {}
	StringAttribute publisher_identifier {}
	StringAttribute data_preparer_identifier {}
	StringAttribute application_identifier {}
	StringAttribute copyright_file_identifier {}
	StringAttribute abstract_file_identifier {}
	StringAttribute bibliographic_file_identifier {}
}

AssetType File {
	desc: 'An additional file to be included in the built ISO.'
	
	FileReferenceAttribute src { desc: 'The path of the file, relative to the .asset file.' }
	StringAttribute path { desc: 'Where to put the file on the filesystem of the built ISO.'}
	
	Examples examples {
		File cnf_icon_en_sys {
			src: 'cnf/icon_en.sys'
			path: 'cnf/icon_en.sys'
		}
	}
}

AssetType Mesh {
	bin_leaf: true
	
	FileReferenceAttribute src {
		desc: 'The file path of the model file to use.'
		required: true
		games: [1 2 3 4]
	}
	
	StringAttribute node {
		desc: 'The name of the node to use. This is the same as the Blender node name.'
		required: true
		games: [1 2 3 4]
	}
}

AssetType Texture {
	desc: 'A reference to an image file. Only PNG images are currently supported.'
	bin_leaf: true
	
	FileReferenceAttribute src {}
	
	Examples examples {
		Texture my_texture {
			src: 'my_texture.png'
		}
	}
}

AssetType FlatWad {
	desc: 'A WAD file where each child represents a different data segment referenced by the header. The tag of each child is converted to a number which is used to determine at what position to write the sector offset and size into the header. This type is mainly used for debugging.'
	wad: true
	
	Examples examples {
		FlatWad online {
			Binary 0x8 { src: 'data.bin' }
			Binary 0x10 { src: 'transition_bankgrounds/0.bin' }
			Binary 0x18 { src: 'transition_bankgrounds/1.bin' }
			Binary 0x20 { src: 'transition_bankgrounds/2.bin' }
			Binary 0x28 { src: 'transition_bankgrounds/3.bin' }
			Binary 0x30 { src: 'transition_bankgrounds/4.bin' }
			Binary 0x38 { src: 'transition_bankgrounds/5.bin' }
			Binary 0x40 { src: 'transition_bankgrounds/6.bin' }
			Binary 0x48 { src: 'transition_bankgrounds/7.bin' }
			Binary 0x50 { src: 'transition_bankgrounds/8.bin' }
			Binary 0x58 { src: 'transition_bankgrounds/9.bin' }
			Binary 0x60 { src: 'transition_bankgrounds/10.bin' }
		}
	}
}

// *****************************************************************************

Category globals {
	name: 'Globals'
}

AssetType ArmorWad {
	wad: true
	flattenable: true
	
	Child armors {
		desc: 'A list of all the armors/skins.'
		allowed_types: ['Collection']
		required: true
		games: [2 3 4]
	}
	
	Child bot_textures {
		desc: 'Textures for Merc and Green.'
		allowed_types: ['Collection']
		required: true
		games: [4]
	}
	Child landstalker_textures {
		desc: 'Textures for the landstalker.'
		allowed_types: ['Collection']
		required: true
		games: [4]
	}
	Child dropship_textures {
		desc: 'Textures for the dropship.'
		allowed_types: ['Collection']
		required: true
		games: [4]
	}
}

AssetType AudioWad {
	wad: true
	
	Child vendor     { allowed_types: ['Collection'] }
	Child global_sfx { allowed_types: ['Collection'] }
	Child help       { allowed_types: ['Collection'] }
}

AssetType HelpAudio {
	wad: true
	
	Child english { allowed_types: ['Sound' 'Binary'] }
	Child french  { allowed_types: ['Sound' 'Binary'] }
	Child german  { allowed_types: ['Sound' 'Binary'] }
	Child spanish { allowed_types: ['Sound' 'Binary'] }
	Child italian { allowed_types: ['Sound' 'Binary'] }
}

AssetType BonusWad {
	wad: true
	flattenable: true
	
	Child credits_text {
		desc: 'The text used in the credits sequence.'
		allowed_types: ['Collection']
		required: true
		games: [2 3 4]
		Child child {
			allowed_types: ['Binary']
		}
	}
	Child credits_images {
		desc: 'The background images used in the credits sequence.'
		allowed_types: ['Collection']
		required: true
		games: [2 3 4]
		Child child {
			allowed_types: ['Texture']
		}
	}
	Child demo_menu {
		allowed_types: ['Collection']
		required: true
		games: [2 3 4]
		Child child {
			allowed_types: ['Collection']
			Child child {
				allowed_types: ['Texture']
			}
		}
	}
	Child demo_exit {
		allowed_types: ['Collection']
		required: true
		games: [2 3 4]
		Child child {
			allowed_types: ['Collection']
			Child child {
				allowed_types: ['Texture']
			}
		}
	}
	Child cheat_images {
		desc: 'The images used on the cheats screen.'
		allowed_types: ['Collection']
		required: true
		games: [2 3 4]
		Child child {
			allowed_types: ['Texture']
		}
	}
	Child skill_images {
		desc: 'The images used on the skill points screen.'
		allowed_types: ['Collection']
		required: true
		games: [2 3 4]
		Child child {
			allowed_types: ['Texture']
		}
	}
	Child trophy_image {
		allowed_types: ['Texture' 'Binary']
		required: true
		games: [2 3 4]
	}
	Child dige {
		allowed_types: ['Binary']
		required: true
		games: [4]
	}
}

AssetType GadgetWad {
	wad: true
}

AssetType HudWad {
	wad: true
	flattenable: true
	
	Child online_images        { allowed_types: ['Collection'] }
	Child ratchet_seqs         { allowed_types: ['Collection'] }
	Child hud_seqs             { allowed_types: ['Collection'] }
	Child vendor               { allowed_types: ['Binary'] }
	Child all_text             { allowed_types: ['Collection'] }
	Child hudw3d               { allowed_types: ['Binary'] }
	Child e3_level_ss          { allowed_types: ['Collection'] }
	Child nw_dnas_image        { allowed_types: ['Texture' 'Binary'] }
	Child split_screen_texture { allowed_types: ['Texture' 'Binary'] }
	Child radar_maps           { allowed_types: ['Collection'] }
	Child weapon_plates_large  { allowed_types: ['Collection'] }
	Child mission_plates_large { allowed_types: ['Collection'] }
	Child gui_plates           { allowed_types: ['Collection'] }
	Child vendor_plates        { allowed_types: ['Collection'] }
	Child loading_screen       { allowed_types: ['Texture' 'Binary'] }
	Child planets              { allowed_types: ['Collection'] }
	Child cinematics           { allowed_types: ['Collection'] }
	Child equip_large          { allowed_types: ['Collection'] }
	Child equip_small          { allowed_types: ['Collection'] }
	Child moves                { allowed_types: ['Collection'] }
	Child save_level           { allowed_types: ['Collection'] }
	Child save_empty           { allowed_types: ['Collection'] }
	Child skills               { allowed_types: ['Collection'] }
	Child reward_back          { allowed_types: ['Texture' 'Binary'] }
	Child complete_back        { allowed_types: ['Texture' 'Binary'] }
	Child complete_back_coop   { allowed_types: ['Texture' 'Binary'] }
	Child rewards              { allowed_types: ['Collection'] }
	Child leaderboard          { allowed_types: ['Texture' 'Binary'] }
	Child cutaways             { allowed_types: ['Collection'] }
	Child sketchbook           { allowed_types: ['Collection'] }
	Child character_epilogues  { allowed_types: ['Collection'] }
	Child character_cards      { allowed_types: ['Collection'] }
	Child equip_plate          { allowed_types: ['Texture' 'Binary'] }
	Child hud_flythru          { allowed_types: ['Texture' 'Binary'] }
	Child mp_maps              { allowed_types: ['Collection'] }
	Child tourney_plates_large { allowed_types: ['Collection'] }
}

AssetType MiscWad {
	wad: true
	flattenable: true
	
	Child debug_font {
		allowed_types: ['Texture' 'Binary']
		required: true
		games: [1 2 3 4]
	}
	Child irx {
		allowed_types: ['IrxWad']
		required: true
		games: [1 2 3 4]
	}
	Child save_game {
		allowed_types: ['Binary']
		required: true
		games: [1 2 3 4]
	}
	Child frontend_code { allowed_types: ['Binary'] }
	Child frontend      { allowed_types: ['Binary'] }
	Child exit          { allowed_types: ['Binary'] }
	Child boot          { allowed_types: ['BootWad'] }
	Child gadget        { allowed_types: ['Binary'] }
}

AssetType IrxWad {
	desc: 'A container for IOP modules.'
	wad: true
	
	Child sio2man {
		allowed_types: ['Binary']
		required: true
		games: [2 3 4]
	}
	Child mcman {
		desc: 'Memory card manager.'
		allowed_types: ['Binary']
		required: true
		games: [2 3 4]
	}
	Child mcserv {
		desc: 'Memory card server.'
		allowed_types: ['Binary']
		required: true
		games: [2 3 4]
	}
	Child padman {
		desc: 'Gamepad manager.'
		allowed_types: ['Binary']
		required: true
		games: [2 3 4]
	}
	Child mtapman{
		desc: 'Multitap manager.'
		allowed_types: ['Binary']
		required: true
		games: [2 3 4]
	}
	Child libsd {
		desc: 'Sound library.'
		allowed_types: ['Binary']
		required: true
		games: [2 3 4]
	}
	Child 989snd {
		desc: 'Sound library.'
		allowed_types: ['Binary']
		required: true
		games: [2 3 4]
	}
	Child stash {
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child inet {
		desc: 'Networking library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child netcnf {
		desc: 'Networking library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child inetctl  {
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child msifrpc  {
		desc: 'RPC library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child dev9 {
		desc: 'HDD/ethernet/modem adapter library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child smap {
		desc: 'Ethernet driver.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child libnetb {
		desc: 'Networking library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child ppp {
		desc: 'Point to Point Protcol (PPP) library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child pppoe {
		desc: 'Point to Point Protcol over Ethernet (PPPoE) library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child usbd {
		desc: 'USB library.'
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child lgaud {
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child eznetcnf {
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child eznetctl {
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child lgkbm {
		allowed_types: ['Binary']
		required: true
		games: [3 4]
	}
	Child streamer {
		allowed_types: ['Binary']
		required: true
		games: [4]
	}
	Child astrm {
		allowed_types: ['Binary']
		required: true
		games: [4]
	}
}

AssetType BootWad {
	wad: true
	
	Child english     { allowed_types: ['Binary'] }
	Child french      { allowed_types: ['Binary'] }
	Child german      { allowed_types: ['Binary'] }
	Child spanish     { allowed_types: ['Binary'] }
	Child italian     { allowed_types: ['Binary'] }
	Child hud         { allowed_types: ['Collection'] }
	Child boot_plates { allowed_types: ['Collection'] }
	Child sram        { allowed_types: ['Binary'] }
}

AssetType MpegWad {
	desc: 'The file containing all of the MPEG cutscenes.'
	wad: true
	
	Child story {
		desc: 'A list of all the MPEG cutscenes.'
		allowed_types: ['Collection']
	}
}

AssetType Mpeg {
	desc: 'A video file.'
	bin_leaf: true
	
	FileReferenceAttribute src {}
}

AssetType OnlineWad {
	wad: true
	flattenable: true
	
	Child data { allowed_types: ['Binary'] }
	Child transition_backgrounds { allowed_types: ['Collection'] }
}

AssetType SceneWad {
	wad: true
	flattenable: true
}

AssetType SpaceWad {
	wad: true
	
	Child transitions { allowed_types: ['Collection'] }
}

// *****************************************************************************

Category level {
	name: 'Level'
}

AssetType Level {
	Child level { allowed_types: ['LevelWad' 'Binary' ] }
	Child audio { allowed_types: ['LevelAudioWad' 'Binary' ] }
	Child scene { allowed_types: ['LevelSceneWad' 'Binary' ] }
}

AssetType LevelWad {
	wad: true
	level_wad: true
	
	IntegerAttribute id {}
	IntegerAttribute reverb {}
	
	Child data     { allowed_types: ['LevelDataWad'] }
	Child chunks   { allowed_types: ['Collection'] }
	Child missions { allowed_types: ['Collection'] }
}

AssetType LevelDataWad {
	wad: true
	level_wad: true
	
	Child core                { allowed_types: ['LevelCore'] }
	Child moby8355_pvars      { allowed_types: ['Binary'] }
	Child code                { allowed_types: ['Binary'] }
	Child sound_bank          { allowed_types: ['Binary'] }
	Child hud_header          { allowed_types: ['Binary'] }
	Child hud_banks           { allowed_types: ['Collection'] }
	Child transition_textures { allowed_types: ['Binary'] }
	Child art_instances       { allowed_types: ['Binary'] }
	Child gameplay            { allowed_types: ['Binary'] }
	Child global_nav_data     { allowed_types: ['Binary'] }
}

AssetType LevelCore {
	Child tfrags { allowed_types: ['Binary'] }
	Child tfrag_textures { allowed_types: ['Collection'] }
	Child occlusion { allowed_types: ['Binary'] }
	Child sky { allowed_types: ['Binary'] }
	Child collision { allowed_types: ['Binary'] }
	Child moby_classes { allowed_types: ['Collection'] }
	Child tie_classes { allowed_types: ['Collection'] }
	Child shrub_classes { allowed_types: ['Collection'] }
	Child particle_textures { allowed_types: ['Collection'] }
	Child common_fx_textures { allowed_types: ['Collection'] }
	Child local_fx_textures { allowed_types: ['Collection'] }
	Child sound_remap { allowed_types: ['Binary'] }
	Child moby_sound_remap { allowed_types: ['Binary'] }
	Child ratchet_seqs {
		allowed_types: ['Collection']
		games: [1 2 3]
	}
	Child light_cuboids {
		allowed_types: ['Collection']
		games: [4]
	}
}

AssetType Chunk {
	Child tfrags     { allowed_types: ['Binary'] }
	Child collision  { allowed_types: ['Binary'] }
	Child sound_bank { allowed_types: ['Binary'] }
}

AssetType Mission {
	Child instances  { allowed_types: ['Binary'] }
	Child classes    { allowed_types: ['Binary'] }
	Child sound_bank { allowed_types: ['Binary'] }
}

AssetType LevelAudioWad {
	wad: true
	level_wad: true
	
	Child bin_data       { allowed_types: ['Collection'] }
	Child upgrade_sample { allowed_types: ['Binary'] }
	Child platinum_bolt  { allowed_types: ['Binary'] }
	Child spare          { allowed_types: ['Binary'] }
}

AssetType LevelSceneWad {
	wad: true
	level_wad: true
	
	Child scenes { allowed_types: ['Collection'] }
}

AssetType Scene {
	Child speech_english_left  { allowed_types: ['Binary'] }
	Child speech_english_right { allowed_types: ['Binary'] }
	Child subtitles            { allowed_types: ['Binary'] }
	Child speech_french_left   { allowed_types: ['Binary'] }
	Child speech_french_right  { allowed_types: ['Binary'] }
	Child speech_german_left   { allowed_types: ['Binary'] }
	Child speech_german_right  { allowed_types: ['Binary'] }
	Child speech_spanish_left  { allowed_types: ['Binary'] }
	Child speech_spanish_right { allowed_types: ['Binary'] }
	Child speech_italian_left  { allowed_types: ['Binary'] }
	Child speech_italian_right { allowed_types: ['Binary'] }
	Child moby_load            { allowed_types: ['Binary'] }
	Child chunks               { allowed_types: ['Collection'] }
}

// *****************************************************************************

Category classes {
	name: 'Classes'
}

AssetType MobyClass {
	IntegerAttribute id {
		desc: 'The integer used to reference this moby class at runtime.'
		required: true
		games: [1 2 3 4]
	}
	BooleanAttribute has_moby_table_entry {}
	
	Child core { allowed_types: ['MobyClassCore' 'Binary'] }
	Child materials { allowed_types: ['Collection'] }
}

AssetType MobyClassCore {
	bin_leaf: true
	
	Child mesh { allowed_types: ['Mesh'] }
	Child low_lod_mesh { allowed_types: ['Mesh'] }
}

AssetType Material {
	StringAttribute name {
		desc: 'The name of the COLLADA material being referenced.'
	}
	
	BooleanAttribute glass {
		desc: 'Make the material shiny, like glass?'
	}
	
	BooleanAttribute chrome {
		desc: 'Make the material shiny, like chrome?'
	}
	
	Child texture { allowed_types: ['Texture'] }
}

AssetType TieClass {
	bin_leaf: true
	
	IntegerAttribute id {
		desc: 'The integer used to reference this tie class at runtime.'
		required: true
		games: [1 2 3 4]
	}
	
	Child core { allowed_types: ['Binary'] }
	Child textures { allowed_types: ['Collection'] }
}

AssetType ShrubClass {
	bin_leaf: true
	
	IntegerAttribute id {
		desc: 'The integer used to reference this shrub class at runtime.'
		required: true
		games: [1 2 3 4]
	}
	
	Child core { allowed_types: ['Binary'] }
	Child textures { allowed_types: ['Collection'] }
}
